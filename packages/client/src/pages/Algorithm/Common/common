import AnimationB from "../bstComponent/bstanimate.jsx";
import CAnimation from "./Canimate";

const Common= {
    width : 900,
    height : 300,
    validdata(valuename){
        let tdata = document.getElementById(valuename).value.split(",")
        for (const ele of tdata) {
          if (isNaN(ele)) {
            throw new Error("Only numbers and commas can be entered");
          }
        }
        return tdata
    },
      
    validonedata(valuename){
        let xdata =  Common.validdata(valuename)
        if (xdata.length === 1) {
            return xdata[0]
        }else {
            throw new Error("Only select one number");
        }
    },
    findinarray(xdata,dataset) {
        for (var i = 0; i < dataset.length; i++) {
          if (dataset[i].value == xdata) {
            return i;
          }
        }
        throw new Error(xdata + " is not in heap");
    },
    nextStep(step,record,...restParams){
      if(step>=record.length)
      {
        alert("Animation is end!")
        
      }
      else
      {
        if(typeof(record[step].e1) == "undefined"){
          AnimationB.Pathdisplay(record[step]);
        }
        else{
          if(record[step].e1==0){
            if(restParams.length>0){
              CAnimation.deleteelement(restParams[0]+1,restParams[1])
            }
            else{
              CAnimation.deleteelement(record[step].e2[1],record[step].e2[0])
            }
            
          }
          else{
            const text1 = document.getElementById("t" + record[step].e1);
            const text2 = document.getElementById("t" + record[step].e2);
            CAnimation.animateExchange(text1,text2);
          }
        }
        ++step
      }
      return step
    },

    back(step,record,...restParams){
      if(step<1)
      {
        alert("This is the first step!")
      }
      else
      {
        step--
        if(typeof(record[step].e1) == "undefined"){
          AnimationB.Pathdisappear(record[step]);
        }
        else{
          if(record[step].e1==0){
            if(restParams.length>0){
              CAnimation.showelement(restParams[0]+1,restParams[1])
            }else{
              CAnimation.showelement(record[step-1].e2,record[step-1].e1)
            } 
          }
          else{
            const text1 = document.getElementById("t" + record[step].e1);
            const text2 = document.getElementById("t" + record[step].e2);
            CAnimation.animateExchange(text1,text2);
          }
        }
      }
      return step
    } 
  }

  export default Common;